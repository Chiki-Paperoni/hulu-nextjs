import Head from "next/head";
import Image from "next/image";
import Header from "../components/Header/Header";
import Filters from "../components/nav/Filters";
import Movies from "../components/Movies/Movies";
import { useEffect, useState, useCallback, useRef } from "react";

import { useRouter } from "next/router";

function useFetch(genre, page) {
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(false);
	const [list, setList] = useState([]);

	const fetchData = useCallback(async () => {
		try {
			setLoading(true);
			setError(false);
			const res = await fetch(
				`/api/movies?genre=${genre || ""}&page=${page}`
			).then((r) => r.json());
			await setList((prev) => [...prev, ...res]);
			setLoading(false);
		} catch (err) {
			setError(err);
		}
	}, [page]);

	useEffect(() => {
		fetchData(genre);
	}, [page]);

	return { loading, error, list, setList };
}

export default function Home(props) {
	const router = useRouter();
	const genre = router.query.genre || "";
	const [page, setPage] = useState(1);
	const { loading, error, list, setList } = useFetch(genre, page);
	const loader = useRef(null);

	useEffect(() => {
		setList([]);
		setPage(1);
	}, [genre]);

	const handleObserver = useCallback((entries) => {
		const target = entries[0];
		if (target.isIntersecting) {
			setPage((prev) => prev + 1);
		}
	}, []);
	useEffect(() => {
		const option = {
			root: null,
			rootMargin: "20px",
			threshold: 0,
		};
		const observer = new IntersectionObserver(handleObserver, option);
		if (loader.current) observer.observe(loader.current);
	}, [handleObserver]);

	return (
		<div>
			<Head>
				<title>Create Next App | Hulu</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Header onClick={() => console.log(page)} />
			<Filters />
			<Movies movies={list} />

			{loading && <p>Loading...</p>}
			{error && <p>Error!</p>}

			<div id="interceptor" ref={loader}></div>
		</div>
	);
}

//alternative for useEffect in Movies component ToLearn return goes to props of Home
// export async function getServerSideProps(context) {
// 	const genre = context.query.genre;

// 	const request = await fetch(
// 		`https://api.themoviedb.org/3${
// 			requests[genre]?.url || requests.Trending.url
// 		}`
// 	).then((res) => res.json());
// 	return {
// 		props: {
// 			results: request.results,
// 		},
// 	};
// }
